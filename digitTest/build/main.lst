ARM GAS  /tmp/ccvdagdF.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Error_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	Error_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	Error_Handler:
  26              	.LFB135:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "app_x-cube-ai.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** #define DVFS_SETTING_5
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #ifdef DVFS_SETTING_1
  27:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV8 
  28:Core/Src/main.c **** #define PLLN_VAL 8
  29:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_0
  30:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE2
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccvdagdF.s 			page 2


  32:Core/Src/main.c **** #elif defined(DVFS_SETTING_2)
  33:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV8 
  34:Core/Src/main.c **** #define PLLN_VAL 16
  35:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_1
  36:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE2
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** #elif defined(DVFS_SETTING_3)
  39:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV8 
  40:Core/Src/main.c **** #define PLLN_VAL 24
  41:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_1
  42:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE2
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** #elif defined(DVFS_SETTING_4)
  45:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV8 
  46:Core/Src/main.c **** #define PLLN_VAL 48
  47:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_1
  48:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE1
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** #elif defined(DVFS_SETTING_5)
  51:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV8
  52:Core/Src/main.c **** #define PLLN_VAL 64
  53:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_2
  54:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE1
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** #elif defined(DVFS_SETTING_6)
  57:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV4
  58:Core/Src/main.c **** #define PLLN_VAL 75
  59:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_4
  60:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE1
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** #elif defined(DVFS_SETTING_7)
  63:Core/Src/main.c **** #define PLLM_VAL RCC_PLLM_DIV4
  64:Core/Src/main.c **** #define PLLN_VAL 85
  65:Core/Src/main.c **** #define FLASH_WAITS FLASH_LATENCY_4
  66:Core/Src/main.c **** #define REG_VOLTAGE PWR_REGULATOR_VOLTAGE_SCALE1_BOOST
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** #endif
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  71:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* USER CODE END Includes */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  76:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END PTD */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  81:Core/Src/main.c **** /* USER CODE BEGIN PD */
  82:Core/Src/main.c **** /* USER CODE END PD */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  85:Core/Src/main.c **** /* USER CODE BEGIN PM */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE END PM */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccvdagdF.s 			page 3


  89:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  90:Core/Src/main.c **** CRC_HandleTypeDef hcrc;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* USER CODE BEGIN PV */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* USER CODE END PV */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  97:Core/Src/main.c **** void SystemClock_Config(void);
  98:Core/Src/main.c **** static void MX_CRC_Init(void);
  99:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* USER CODE END PFP */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 104:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 105:Core/Src/main.c **** static GPIO_InitTypeDef  GPIO_InitStruct;
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* USER CODE END 0 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /**
 110:Core/Src/main.c ****   * @brief  The application entry point.
 111:Core/Src/main.c ****   * @retval int
 112:Core/Src/main.c ****   */
 113:Core/Src/main.c **** int main(void)
 114:Core/Src/main.c **** {
 115:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END 1 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Core/Src/main.c ****   HAL_Init();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END Init */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Configure the system clock */
 129:Core/Src/main.c ****   SystemClock_Config();
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 132:Core/Src/main.c **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 133:Core/Src/main.c **** 	GPIO_InitStruct.Pin = GPIO_PIN_8;
 134:Core/Src/main.c **** 	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 135:Core/Src/main.c **** 	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 136:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 137:Core/Src/main.c ****   	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 138:Core/Src/main.c ****  	//HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 139:Core/Src/main.c **** 	
 140:Core/Src/main.c **** 	GPIO_InitStruct.Pin = GPIO_PIN_9;
 141:Core/Src/main.c **** 	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 142:Core/Src/main.c **** 	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 143:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 144:Core/Src/main.c ****   	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 145:Core/Src/main.c **** 
ARM GAS  /tmp/ccvdagdF.s 			page 4


 146:Core/Src/main.c ****   /* USER CODE END SysInit */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Initialize all configured peripherals */
 149:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	
 150:Core/Src/main.c ****   MX_CRC_Init();
 151:Core/Src/main.c ****   MX_X_CUBE_AI_Init();
 152:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 153:Core/Src/main.c **** 	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	
 154:Core/Src/main.c ****   MX_X_CUBE_AI_Process();
 155:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);	
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* USER CODE END 2 */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* Infinite loop */
 160:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 161:Core/Src/main.c ****   while (1)
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     /* USER CODE END WHILE */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c ****   /* USER CODE END 3 */
 168:Core/Src/main.c **** }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief System Clock Configuration
 172:Core/Src/main.c ****   * @retval None
 173:Core/Src/main.c ****   */
 174:Core/Src/main.c **** void SystemClock_Config(void)
 175:Core/Src/main.c **** {
 176:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 177:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   // HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 182:Core/Src/main.c ****   // HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 183:Core/Src/main.c ****   // HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 184:Core/Src/main.c ****   HAL_PWREx_ControlVoltageScaling(REG_VOLTAGE);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 188:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 189:Core/Src/main.c ****   */
 190:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI; 		// HSI is set to 16MHz
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = PLLM_VAL; 				// PLLM sets VCO input to 2MHz
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = PLLN_VAL; 							// VCO output = 4MHz (VCO input) * PLLN; PLLN = mai
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2; 				// Main system clock = VCO output/2
 200:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 201:Core/Src/main.c ****   {
 202:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccvdagdF.s 			page 5


 203:Core/Src/main.c ****   }
 204:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 205:Core/Src/main.c ****   */
 206:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 207:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 208:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 209:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 211:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAITS) != HAL_OK)
 214:Core/Src/main.c ****   {
 215:Core/Src/main.c ****     Error_Handler();
 216:Core/Src/main.c ****   }
 217:Core/Src/main.c **** }
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** /**
 220:Core/Src/main.c ****   * @brief CRC Initialization Function
 221:Core/Src/main.c ****   * @param None
 222:Core/Src/main.c ****   * @retval None
 223:Core/Src/main.c ****   */
 224:Core/Src/main.c **** static void MX_CRC_Init(void)
 225:Core/Src/main.c **** {
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 0 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END CRC_Init 0 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 1 */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE END CRC_Init 1 */
 234:Core/Src/main.c ****   hcrc.Instance = CRC;
 235:Core/Src/main.c ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 236:Core/Src/main.c ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 237:Core/Src/main.c ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 238:Core/Src/main.c ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 239:Core/Src/main.c ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 240:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 241:Core/Src/main.c ****   {
 242:Core/Src/main.c ****     Error_Handler();
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 2 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END CRC_Init 2 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** }
 249:Core/Src/main.c **** 
 250:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /* USER CODE END 4 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /**
 255:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 256:Core/Src/main.c ****   * @retval None
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c **** void Error_Handler(void)
 259:Core/Src/main.c **** {
ARM GAS  /tmp/ccvdagdF.s 			page 6


  28              		.loc 1 259 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LBB4:
  35              	.LBB5:
  36              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccvdagdF.s 			page 7


  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccvdagdF.s 			page 8


 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
ARM GAS  /tmp/ccvdagdF.s 			page 9


 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  37              		.loc 2 209 0
  38              		.syntax unified
  39              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  40 0000 72B6     		cpsid i
  41              	@ 0 "" 2
  42              		.thumb
  43              		.syntax unified
  44              	.L2:
  45 0002 FEE7     		b	.L2
  46              	.LBE5:
ARM GAS  /tmp/ccvdagdF.s 			page 10


  47              	.LBE4:
  48              		.cfi_endproc
  49              	.LFE135:
  51              		.section	.text.MX_CRC_Init,"ax",%progbits
  52              		.align	1
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu fpv4-sp-d16
  58              	MX_CRC_Init:
  59              	.LFB134:
 225:Core/Src/main.c **** 
  60              		.loc 1 225 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64 0000 08B5     		push	{r3, lr}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 3, -8
  68              		.cfi_offset 14, -4
 234:Core/Src/main.c ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
  69              		.loc 1 234 0
  70 0002 0848     		ldr	r0, .L7
  71 0004 084B     		ldr	r3, .L7+4
  72 0006 0360     		str	r3, [r0]
 235:Core/Src/main.c ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  73              		.loc 1 235 0
  74 0008 0023     		movs	r3, #0
  75 000a 0371     		strb	r3, [r0, #4]
 236:Core/Src/main.c ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  76              		.loc 1 236 0
  77 000c 4371     		strb	r3, [r0, #5]
 237:Core/Src/main.c ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  78              		.loc 1 237 0
  79 000e 4361     		str	r3, [r0, #20]
 238:Core/Src/main.c ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  80              		.loc 1 238 0
  81 0010 8361     		str	r3, [r0, #24]
 239:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
  82              		.loc 1 239 0
  83 0012 0123     		movs	r3, #1
  84 0014 0362     		str	r3, [r0, #32]
 240:Core/Src/main.c ****   {
  85              		.loc 1 240 0
  86 0016 FFF7FEFF 		bl	HAL_CRC_Init
  87              	.LVL0:
  88 001a 00B9     		cbnz	r0, .L6
  89 001c 08BD     		pop	{r3, pc}
  90              	.L6:
 242:Core/Src/main.c ****   }
  91              		.loc 1 242 0
  92 001e FFF7FEFF 		bl	Error_Handler
  93              	.LVL1:
  94              	.L8:
  95 0022 00BF     		.align	2
  96              	.L7:
ARM GAS  /tmp/ccvdagdF.s 			page 11


  97 0024 00000000 		.word	hcrc
  98 0028 00300240 		.word	1073885184
  99              		.cfi_endproc
 100              	.LFE134:
 102              		.section	.text.SystemClock_Config,"ax",%progbits
 103              		.align	1
 104              		.global	SystemClock_Config
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	SystemClock_Config:
 111              	.LFB133:
 175:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 112              		.loc 1 175 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 80
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 00B5     		push	{lr}
 117              	.LCFI1:
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 14, -4
 120 0002 95B0     		sub	sp, sp, #84
 121              	.LCFI2:
 122              		.cfi_def_cfa_offset 88
 176:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 123              		.loc 1 176 0
 124 0004 3822     		movs	r2, #56
 125 0006 0021     		movs	r1, #0
 126 0008 06A8     		add	r0, sp, #24
 127 000a FFF7FEFF 		bl	memset
 128              	.LVL2:
 177:Core/Src/main.c **** 
 129              		.loc 1 177 0
 130 000e 0023     		movs	r3, #0
 131 0010 0193     		str	r3, [sp, #4]
 132 0012 0293     		str	r3, [sp, #8]
 133 0014 0393     		str	r3, [sp, #12]
 134 0016 0493     		str	r3, [sp, #16]
 135 0018 0593     		str	r3, [sp, #20]
 184:Core/Src/main.c **** 
 136              		.loc 1 184 0
 137 001a 4FF40070 		mov	r0, #512
 138 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 139              	.LVL3:
 190:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 140              		.loc 1 190 0
 141 0022 0223     		movs	r3, #2
 142 0024 0693     		str	r3, [sp, #24]
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 143              		.loc 1 191 0
 144 0026 4FF48072 		mov	r2, #256
 145 002a 0992     		str	r2, [sp, #36]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 146              		.loc 1 192 0
 147 002c 4022     		movs	r2, #64
 148 002e 0A92     		str	r2, [sp, #40]
ARM GAS  /tmp/ccvdagdF.s 			page 12


 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI; 		// HSI is set to 16MHz
 149              		.loc 1 193 0
 150 0030 0D93     		str	r3, [sp, #52]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = PLLM_VAL; 				// PLLM sets VCO input to 2MHz
 151              		.loc 1 194 0
 152 0032 0E93     		str	r3, [sp, #56]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = PLLN_VAL; 							// VCO output = 4MHz (VCO input) * PLLN; PLLN = mai
 153              		.loc 1 195 0
 154 0034 0821     		movs	r1, #8
 155 0036 0F91     		str	r1, [sp, #60]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 156              		.loc 1 196 0
 157 0038 1092     		str	r2, [sp, #64]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 158              		.loc 1 197 0
 159 003a 1193     		str	r3, [sp, #68]
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2; 				// Main system clock = VCO output/2
 160              		.loc 1 198 0
 161 003c 1293     		str	r3, [sp, #72]
 199:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 162              		.loc 1 199 0
 163 003e 1393     		str	r3, [sp, #76]
 200:Core/Src/main.c ****   {
 164              		.loc 1 200 0
 165 0040 06A8     		add	r0, sp, #24
 166 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 167              	.LVL4:
 168 0046 78B9     		cbnz	r0, .L13
 206:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 169              		.loc 1 206 0
 170 0048 0F23     		movs	r3, #15
 171 004a 0193     		str	r3, [sp, #4]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172              		.loc 1 208 0
 173 004c 0323     		movs	r3, #3
 174 004e 0293     		str	r3, [sp, #8]
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 175              		.loc 1 209 0
 176 0050 0023     		movs	r3, #0
 177 0052 0393     		str	r3, [sp, #12]
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 178              		.loc 1 210 0
 179 0054 0493     		str	r3, [sp, #16]
 211:Core/Src/main.c **** 
 180              		.loc 1 211 0
 181 0056 0593     		str	r3, [sp, #20]
 213:Core/Src/main.c ****   {
 182              		.loc 1 213 0
 183 0058 0221     		movs	r1, #2
 184 005a 01A8     		add	r0, sp, #4
 185 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 186              	.LVL5:
 187 0060 20B9     		cbnz	r0, .L14
 217:Core/Src/main.c **** 
 188              		.loc 1 217 0
 189 0062 15B0     		add	sp, sp, #84
 190              	.LCFI3:
ARM GAS  /tmp/ccvdagdF.s 			page 13


 191              		.cfi_remember_state
 192              		.cfi_def_cfa_offset 4
 193              		@ sp needed
 194 0064 5DF804FB 		ldr	pc, [sp], #4
 195              	.L13:
 196              	.LCFI4:
 197              		.cfi_restore_state
 202:Core/Src/main.c ****   }
 198              		.loc 1 202 0
 199 0068 FFF7FEFF 		bl	Error_Handler
 200              	.LVL6:
 201              	.L14:
 215:Core/Src/main.c ****   }
 202              		.loc 1 215 0
 203 006c FFF7FEFF 		bl	Error_Handler
 204              	.LVL7:
 205              		.cfi_endproc
 206              	.LFE133:
 208              		.section	.text.main,"ax",%progbits
 209              		.align	1
 210              		.global	main
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv4-sp-d16
 216              	main:
 217              	.LFB132:
 114:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 218              		.loc 1 114 0
 219              		.cfi_startproc
 220              		@ Volatile: function does not return.
 221              		@ args = 0, pretend = 0, frame = 8
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223 0000 80B5     		push	{r7, lr}
 224              	.LCFI5:
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 7, -8
 227              		.cfi_offset 14, -4
 228 0002 82B0     		sub	sp, sp, #8
 229              	.LCFI6:
 230              		.cfi_def_cfa_offset 16
 122:Core/Src/main.c **** 
 231              		.loc 1 122 0
 232 0004 FFF7FEFF 		bl	HAL_Init
 233              	.LVL8:
 129:Core/Src/main.c **** 
 234              		.loc 1 129 0
 235 0008 FFF7FEFF 		bl	SystemClock_Config
 236              	.LVL9:
 237              	.LBB6:
 132:Core/Src/main.c **** 	GPIO_InitStruct.Pin = GPIO_PIN_8;
 238              		.loc 1 132 0
 239 000c 1A4B     		ldr	r3, .L18
 240 000e DA6C     		ldr	r2, [r3, #76]
 241 0010 42F00102 		orr	r2, r2, #1
 242 0014 DA64     		str	r2, [r3, #76]
 243 0016 DB6C     		ldr	r3, [r3, #76]
ARM GAS  /tmp/ccvdagdF.s 			page 14


 244 0018 03F00103 		and	r3, r3, #1
 245 001c 0193     		str	r3, [sp, #4]
 246 001e 019B     		ldr	r3, [sp, #4]
 247              	.LBE6:
 133:Core/Src/main.c **** 	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 248              		.loc 1 133 0
 249 0020 164C     		ldr	r4, .L18+4
 250 0022 4FF48073 		mov	r3, #256
 251 0026 2360     		str	r3, [r4]
 134:Core/Src/main.c **** 	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 252              		.loc 1 134 0
 253 0028 0125     		movs	r5, #1
 254 002a 6560     		str	r5, [r4, #4]
 135:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 255              		.loc 1 135 0
 256 002c A560     		str	r5, [r4, #8]
 136:Core/Src/main.c ****   	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 257              		.loc 1 136 0
 258 002e 0227     		movs	r7, #2
 259 0030 E760     		str	r7, [r4, #12]
 137:Core/Src/main.c ****  	//HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 260              		.loc 1 137 0
 261 0032 2146     		mov	r1, r4
 262 0034 4FF09040 		mov	r0, #1207959552
 263 0038 FFF7FEFF 		bl	HAL_GPIO_Init
 264              	.LVL10:
 140:Core/Src/main.c **** 	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 265              		.loc 1 140 0
 266 003c 4FF40076 		mov	r6, #512
 267 0040 2660     		str	r6, [r4]
 141:Core/Src/main.c **** 	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 268              		.loc 1 141 0
 269 0042 6560     		str	r5, [r4, #4]
 142:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 270              		.loc 1 142 0
 271 0044 A560     		str	r5, [r4, #8]
 143:Core/Src/main.c ****   	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 272              		.loc 1 143 0
 273 0046 E760     		str	r7, [r4, #12]
 144:Core/Src/main.c **** 
 274              		.loc 1 144 0
 275 0048 2146     		mov	r1, r4
 276 004a 4FF09040 		mov	r0, #1207959552
 277 004e FFF7FEFF 		bl	HAL_GPIO_Init
 278              	.LVL11:
 149:Core/Src/main.c ****   MX_CRC_Init();
 279              		.loc 1 149 0
 280 0052 2A46     		mov	r2, r5
 281 0054 3146     		mov	r1, r6
 282 0056 4FF09040 		mov	r0, #1207959552
 283 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 284              	.LVL12:
 150:Core/Src/main.c ****   MX_X_CUBE_AI_Init();
 285              		.loc 1 150 0
 286 005e FFF7FEFF 		bl	MX_CRC_Init
 287              	.LVL13:
 151:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccvdagdF.s 			page 15


 288              		.loc 1 151 0
 289 0062 FFF7FEFF 		bl	MX_X_CUBE_AI_Init
 290              	.LVL14:
 154:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);	
 291              		.loc 1 154 0
 292 0066 FFF7FEFF 		bl	MX_X_CUBE_AI_Process
 293              	.LVL15:
 155:Core/Src/main.c **** 
 294              		.loc 1 155 0
 295 006a 0022     		movs	r2, #0
 296 006c 3146     		mov	r1, r6
 297 006e 4FF09040 		mov	r0, #1207959552
 298 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 299              	.LVL16:
 300              	.L16:
 301 0076 FEE7     		b	.L16
 302              	.L19:
 303              		.align	2
 304              	.L18:
 305 0078 00100240 		.word	1073876992
 306 007c 00000000 		.word	.LANCHOR0
 307              		.cfi_endproc
 308              	.LFE132:
 310              		.comm	hcrc,36,4
 311              		.section	.bss.GPIO_InitStruct,"aw",%nobits
 312              		.align	2
 313              		.set	.LANCHOR0,. + 0
 316              	GPIO_InitStruct:
 317 0000 00000000 		.space	20
 317      00000000 
 317      00000000 
 317      00000000 
 317      00000000 
 318              		.text
 319              	.Letext0:
 320              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 321              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 322              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 323              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 324              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 325              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 326              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc.h"
 327              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 328              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_crc.h"
 329              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 330              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 331              		.file 14 "Middlewares/ST/AI/Inc/ai_platform.h"
 332              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_pwr_ex.h"
 333              		.file 16 "X-CUBE-AI/App/app_x-cube-ai.h"
ARM GAS  /tmp/ccvdagdF.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvdagdF.s:18     .text.Error_Handler:0000000000000000 $t
     /tmp/ccvdagdF.s:25     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccvdagdF.s:52     .text.MX_CRC_Init:0000000000000000 $t
     /tmp/ccvdagdF.s:58     .text.MX_CRC_Init:0000000000000000 MX_CRC_Init
     /tmp/ccvdagdF.s:97     .text.MX_CRC_Init:0000000000000024 $d
                            *COM*:0000000000000024 hcrc
     /tmp/ccvdagdF.s:103    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccvdagdF.s:110    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccvdagdF.s:209    .text.main:0000000000000000 $t
     /tmp/ccvdagdF.s:216    .text.main:0000000000000000 main
     /tmp/ccvdagdF.s:305    .text.main:0000000000000078 $d
     /tmp/ccvdagdF.s:312    .bss.GPIO_InitStruct:0000000000000000 $d
     /tmp/ccvdagdF.s:316    .bss.GPIO_InitStruct:0000000000000000 GPIO_InitStruct
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_CRC_Init
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_Init
HAL_GPIO_WritePin
MX_X_CUBE_AI_Init
MX_X_CUBE_AI_Process
